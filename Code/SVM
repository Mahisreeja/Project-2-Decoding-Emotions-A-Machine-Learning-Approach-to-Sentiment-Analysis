import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import LabelEncoder

# Load dataset
file_path = "/content/flipkart.csv"  # Update this if needed
df = pd.read_csv(file_path, encoding="ISO-8859-1")

# Print actual column names to verify
print("Column Names in Dataset:", df.columns)

# Set correct column names
TEXT_COLUMN = "Review"   # The column containing customer reviews
LABEL_COLUMN = "Rating"   # The column containing sentiment ratings (1-5)

# Drop missing values
df = df.dropna(subset=[TEXT_COLUMN, LABEL_COLUMN])

# Convert numeric ratings to sentiment labels
def convert_rating_to_sentiment(rating):
    if rating <= 2:
        return "Negative"
    elif rating == 3:
        return "Neutral"
    else:
        return "Positive"

df["Sentiment"] = df[LABEL_COLUMN].apply(convert_rating_to_sentiment)

# Extract features and labels
X = df[TEXT_COLUMN]  # Customer reviews
y = df["Sentiment"]  # Converted sentiment labels

# Encode sentiment labels to numerical values
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

# Split dataset into training (80%) and testing (20%)
X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)

# Convert text into numerical features using TF-IDF
vectorizer = TfidfVectorizer(stop_words="english", max_features=5000)
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Train the SVM classifier
svm_model = SVC(kernel='linear', random_state=42)
svm_model.fit(X_train_tfidf, y_train)

# Make predictions
y_pred = svm_model.predict(X_test_tfidf)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"\nModel Accuracy: {accuracy * 100:.2f}%\n")
print("Classification Report:\n", classification_report(y_test, y_pred, target_names=label_encoder.classes_))
